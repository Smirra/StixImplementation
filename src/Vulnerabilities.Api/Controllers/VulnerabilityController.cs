using System.ComponentModel.DataAnnotations;
using AutoMapper;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Vulnerabilities.Api.Models;
using Vulnerabilities.Api.Repositories;

namespace Vulnerabilities.Api.Controllers;
[ApiController]
[Route("vulnerabilities")]
[Authorize(Roles = Constants.Roles.Editor)]
public class VulnerabilityController(IVulnRepo vulnRepo, IMapper mapper) : ControllerBase
{
    private readonly IVulnRepo _vulnRepo = vulnRepo;
    private readonly IMapper _mapper = mapper;

    private const string uuidPattern = @"[\da-f]{8}-[\da-f]{4}-[\da-f]{4}-[\da-f]{4}-[\da-f]{12}";

    [HttpGet]
    [Authorize(Roles = Constants.Roles.Reader)]
    public async Task<PaginationWrapper<Vulnerability>> GetVulnerabilities(int pageNumber = 1, int pageSize = 10)
    {
        var paginatedVulns = await _vulnRepo.GetVulnerabilities(pageNumber, pageSize);

        return paginatedVulns;
    }

    [HttpGet("{id}")]
    [Authorize(Roles = Constants.Roles.Reader)]
    public async Task<IActionResult> GetVulnerability(string id)
    {
        var vulnerability = await _vulnRepo.GetVulnerability(id);
        if (vulnerability == null)
        {
            return NotFound();
        }

        return Ok(vulnerability);
    }

    [HttpPost]
    public async Task<IActionResult> CreateVulnerability(VulnerabilityDTO vulnDTO)
    {
        var vulnTemp = _mapper.Map<Vulnerability>(vulnDTO);
        var vulnerability = await _vulnRepo.CreateVulnerability(vulnTemp);
        if (vulnerability == null)
        {
            return BadRequest();
        }

        return Created($"/vulnerabilities/{vulnerability.Id}", vulnerability);
    }

    [HttpPut("{id}")]
    public async Task<IActionResult> UpdateVulnerability(
        [Required]
        [RegularExpression($"^vulnerability--{uuidPattern}$", ErrorMessage = "Id must be on the form 'vulnerability--<UUID>'")]
        string id,
        VulnerabilityDTO vulnDTO)
    {
        var vulnerability = await _vulnRepo.GetVulnerability(id);
        if (vulnerability == null)
        {
            return NotFound();
        }

        _mapper.Map(vulnDTO, vulnerability);

        vulnerability = await _vulnRepo.UpdateVulnerability(vulnerability);

        return Ok(vulnerability);
    }

    [HttpDelete("{id}")]
    public async Task<IActionResult> DeleteVulnerability(string id)
    {
        var isDeleted = await _vulnRepo.DeleteVulnerability(id);
        if (!isDeleted)
        {
            return NotFound();
        }

        return NoContent();
    }
}