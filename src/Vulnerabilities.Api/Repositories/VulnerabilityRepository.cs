using Microsoft.EntityFrameworkCore;
using Vulnerabilities.Api.Data;
using Vulnerabilities.Api.Models;

namespace Vulnerabilities.Api.Repositories;

public class VulnRepo(VulnContext context) : IVulnRepo
{
    private readonly VulnContext _context = context;

    public async Task<IEnumerable<Vulnerability>> GetVulnerabilities()
    {
        return await _context.Vulnerabilities.ToListAsync();
    }

    public async Task<PaginationWrapper<Vulnerability>> GetVulnerabilities(int pageNumber, int pageSize)
    {
        var vulnerabilities = await _context.Vulnerabilities.Skip((pageNumber - 1) * pageSize)
                                             .Take(pageSize)
                                             .ToListAsync();
        var pageSizeInt = await _context.Vulnerabilities.CountAsync();

        return new PaginationWrapper<Vulnerability>(vulnerabilities, pageSizeInt, pageNumber, pageSize);

    }

    public async Task<Vulnerability?> GetVulnerability(string id)
    {
        return await _context.Vulnerabilities.FindAsync(id);
    }

    public async Task<Vulnerability> CreateVulnerability(Vulnerability vulnerability)
    {
        _context.Vulnerabilities.Add(vulnerability);
        await _context.SaveChangesAsync();

        return vulnerability;
    }

    public async Task<Vulnerability> UpdateVulnerability(Vulnerability vulnerability)
    {
        _context.Vulnerabilities.Update(vulnerability);
        await _context.SaveChangesAsync();

        return vulnerability;
    }

    public async Task<bool> DeleteVulnerability(string id)
    {
        var vulnerability = await _context.Vulnerabilities.FindAsync(id);
        if (vulnerability == null)
        {
            return false;
        }

        _context.Vulnerabilities.Remove(vulnerability);
        await _context.SaveChangesAsync();

        return true;
    }
}

public interface IVulnRepo
{
    Task<IEnumerable<Vulnerability>> GetVulnerabilities();
    Task<PaginationWrapper<Vulnerability>> GetVulnerabilities(int pageNumber, int pageSize);
    Task<Vulnerability?> GetVulnerability(string id);
    Task<Vulnerability> CreateVulnerability(Vulnerability vulnerability);
    Task<Vulnerability> UpdateVulnerability(Vulnerability vulnerability);
    Task<bool> DeleteVulnerability(string id);
}