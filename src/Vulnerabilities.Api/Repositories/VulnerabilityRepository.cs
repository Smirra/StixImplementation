using Microsoft.EntityFrameworkCore;
using Vulnerabilities.Api.Data;
using Vulnerabilities.Api.Extensions;
using Vulnerabilities.Api.Models;

namespace Vulnerabilities.Api.Repositories;

public class VulnRepo(VulnDbContext context) : IVulnRepo
{
    private readonly VulnDbContext _context = context;

    public async Task<IEnumerable<Vulnerability>> GetVulnerabilities()
    {
        return await _context.Vulnerabilities.ToListAsync();
    }

    public async Task<VulnRspWrapper<Vulnerability>> GetVulnerabilities(int pageNumber,
                                                                        int pageSize,
                                                                        string? filterField,
                                                                        string? filterValue,
                                                                        string? sortOnField,
                                                                        string? sortOrder)
    {
        IQueryable<Vulnerability> vulnerabilities = _context.Vulnerabilities;

        vulnerabilities = ApplyFilter(vulnerabilities, filterField, filterValue);
        vulnerabilities = ApplySorting(vulnerabilities, sortOnField, sortOrder);

        return await GetWrappedResults(vulnerabilities, pageNumber, pageSize);
    }

    public async Task<Vulnerability?> GetVulnerability(string id)
    {
        return await _context.Vulnerabilities.FindAsync(id);
    }

    public async Task<Vulnerability> CreateVulnerability(Vulnerability vulnerability)
    {
        _context.Vulnerabilities.Add(vulnerability);
        await _context.SaveChangesAsync();

        return vulnerability;
    }

    public async Task<Vulnerability> UpdateVulnerability(Vulnerability vulnerability)
    {
        _context.Vulnerabilities.Update(vulnerability);
        await _context.SaveChangesAsync();

        return vulnerability;
    }

    public async Task<bool> DeleteVulnerability(string id)
    {
        var vulnerability = await _context.Vulnerabilities.FindAsync(id);
        if (vulnerability == null)
        {
            return false;
        }

        _context.Vulnerabilities.Remove(vulnerability);
        await _context.SaveChangesAsync();

        return true;
    }

    private IQueryable<Vulnerability> ApplyFilter(IQueryable<Vulnerability> vulnerabilities,
                                                  string? filterField,
                                                  string? filterValue)
    {
        if (!string.IsNullOrWhiteSpace(filterField) && !string.IsNullOrWhiteSpace(filterValue))
        {
            filterField = filterField.PythonToDotNetStyle();
            if (HasProperty(filterField))
            {
                return vulnerabilities;
            }

            vulnerabilities = vulnerabilities.Where(v => EF.Property<string>(v, filterField).Contains(filterValue));
        }

        return vulnerabilities;
    }

    private IQueryable<Vulnerability> ApplySorting(IQueryable<Vulnerability> vulnerabilities,
                                                          string? sortOnField,
                                                          string? sortOrder)
    {
        if (sortOnField == null)
        {
            sortOnField = "Name";
        }
        else
        {
            sortOnField = sortOnField.PythonToDotNetStyle();
            if (HasProperty(sortOnField))
            {
                return vulnerabilities;
            }
        }

        sortOrder ??= "";

        return sortOrder.ToLower() switch
        {
            "asc" => vulnerabilities.OrderBy(v => EF.Property<string>(v, sortOnField)),
            _ => vulnerabilities.OrderByDescending(v => EF.Property<string>(v, sortOnField))
        };
    }

    private static async Task<VulnRspWrapper<Vulnerability>> GetWrappedResults(IQueryable<Vulnerability> vulnerabilities,
                                                                               int pageNumber,
                                                                               int pageSize)
    {
        var totalCount = await vulnerabilities.AsNoTracking().CountAsync();
        var items = await vulnerabilities.Skip(pageSize * (pageNumber - 1))
                                         .Take(pageSize)
                                         .AsNoTracking()
                                         .ToListAsync();

        return new VulnRspWrapper<Vulnerability>(items, totalCount, pageNumber, pageSize);
    }

    private bool HasProperty(string filterField)
    {
        var entityType = _context.Model.FindEntityType(typeof(Vulnerability));
        if (entityType == null || entityType.FindProperty(filterField) == null)
        {
            return true;
        }

        return false;
    }
}

public interface IVulnRepo
{
    Task<IEnumerable<Vulnerability>> GetVulnerabilities();
    Task<VulnRspWrapper<Vulnerability>> GetVulnerabilities(int pageNumber,
                                                           int pageSize,
                                                           string? sortOnField,
                                                           string? sortOrder,
                                                           string? filterField,
                                                           string? filterValue);
    Task<Vulnerability?> GetVulnerability(string id);
    Task<Vulnerability> CreateVulnerability(Vulnerability vulnerability);
    Task<Vulnerability> UpdateVulnerability(Vulnerability vulnerability);
    Task<bool> DeleteVulnerability(string id);
}